// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "testimonials",
    columns: [
      { name: "handle", type: "string" },
      { name: "followers", type: "int" },
      { name: "tweet_url", type: "string" },
      { name: "ast", type: "text" },
    ],
  },
  {
    name: "church_invites",
    columns: [
      { name: "email", type: "email", unique: true },
      { name: "createdAt", type: "datetime" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Testimonials = InferredTypes["testimonials"];
export type TestimonialsRecord = Testimonials & XataRecord;

export type ChurchInvites = InferredTypes["church_invites"];
export type ChurchInvitesRecord = ChurchInvites & XataRecord;

export type DatabaseSchema = {
  testimonials: TestimonialsRecord;
  church_invites: ChurchInvitesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://tejas-o860q2.eu-west-1.xata.sh/db/tejaskumar-com",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
